#include<stdio.h>
#include<string.h>
#include<stdlib.h>
struct symtable
{
	int sym_cnt;
	char sym_name[10];
	int addr;
};
struct littable
{
	int lit_cnt;
	char lit_name[10];
	int addr;
};
struct pooltable
{
	int lit_num;
};

struct symtable st[10];
struct littable lt[10];
struct pooltable pt[10];
int ist=0,ilt=0,ipt=0,poolflag=0;


//	//	//	//	//
char * trim(char ch[20])
{
    int i;
    for(i=0;ch[i]!='\0';i++)
    {}
    ch[i-1]='\0';
    return ch;
}

int addreturn(char ch1[20],char ch2[20])
{
    int t;
    if(ch1[1]=='S')
    {
        t=atoi(ch2);
        return st[t-1].addr;
    }
    if(ch1[1]=='L')
    {
        t=atoi(ch2);
        return lt[t-1].addr;
    }
}
void display_table()
{
    int i,j;
    printf("\n\t**Literal table**\n\tCnt\tname\taddr");
    for(i=0;i<=ilt;i++)
	{
	    printf("\n\t%d\t%s\t%d",lt[i].lit_cnt,lt[i].lit_name,lt[i].addr);     
	}
	printf("\n\t**Symbol table**\n\tCnt\tname\taddr");
	for(j=0;j<=ist;j++)
	{
	    printf("\n\t%d\t%s\t%d",st[j].sym_cnt,st[j].sym_name,st[j].addr);     
	}
	printf("\n");
}
void accept_table()
{
    int i=0,j=0,cnt=0;
    printf("\n\tEnter the literal table : ");
    while(1)
    {
        printf("\n\tEnter 1:add 0:exit->");
        scanf("%d",&cnt);
        if(cnt==0)
        break;
        
        printf("\n\tEnter the cnt,name,addr->");
        scanf("%d%s%d",&lt[i].lit_cnt,lt[i].lit_name,&lt[i].addr);
        ilt=i;
        i++;
        
    }
    
    i=0;
	printf("\n\tEnter the Symbol table : ");
    while(1)
    {
        printf("\n\tEnter 1:add 0:exit->");
        scanf("%d",&cnt);
        if(cnt==0)
        break;
        
        printf("\n\tEnter the cnt,name,addr->");
        scanf("%d%s%d",&st[i].sym_cnt,st[i].sym_name,&st[i].addr);
        ist=i;
        i++;
        
    }
}
int main()
{
	FILE *fp1,*fp2;
	int i=0,n,num,cnt,LC,j=0,line=0;
	char t1[10],t2[10],t3[10],t4[10],t5[10],t6[10],buffer[100];
	
	accept_table();
	display_table();
	
		
	fp1=fopen("inter.txt","r");
	fp2=fopen("out.txt","w");
    while(fgets(buffer,180,fp1))
    {        
       n=sscanf(buffer,"%s%s%s%s%s%s",t1,t2,t3,t4,t5,t6);
       line++; 
       switch(n) 
       {
           case 4:
              if(line!=1)
              fprintf(fp2,"%s - - %s\n",t1,t4);
              else
              fprintf(fp2,"%s - -\n",trim(t2));
           break;
           case 5:
                   if(line!=1)
                   fprintf(fp2,"%s %s - %s\n",t1,trim(t3),t5);
                   else
                   fprintf(fp2,"%s %s %s\n",trim(t2),t3,trim(t5));
           break;
           case 6:
                 fprintf(fp2,"%s %s %s %d\n",t1,trim(t3),t4,addreturn(trim(t5),t6));
                   
           break;
       }
    }   
    fclose(fp1);
	fclose(fp2);
	return 0;
}
