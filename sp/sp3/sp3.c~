#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<ctype.h>
struct TABLE {
	int num;
	char name[50];
};
struct UST {
	int num;
	char name[50];
	char desc[50];
};

struct TABLE st[10];
struct TABLE lt[10];
struct UST ust[100];

char OPERATOR[][10] = {"+","-","*","/","=",",",";","+=","-=","*=","/=","<=",">=","<",">","{","}","(",")","[","]"};
char KEYWORD[][10] = {"auto","break","case","char","const","continue","default","do","double","else","enum","extern","float","for","goto","if","int","long","register","return","short","signed","sizeof","static","struct","switch","typedef","union","unsigned","void","volatile","while"};


int searchTable(struct TABLE tab[10],int max,char key[10]) {
	int i;
	for(i=0;i<max;i++)
		if(strcmp(tab[i].name,key)==0)
			return 1;
	return 0;
}
int searchTerminal(char field[][10],int n,char key[10]) {
	int i;
	for(i=0;i<n;i++)
		if(strcmp(field[i],key)==0)
			return 1;
	return 0;
}

int main() {
	FILE *fp1;
	int i,k=0,flag=0,litflag=0,ist=0,ilt=0,iust=0;
	char FILE[10],ch,buffer[60];

	printf("\n\tEnter file name >>");
	scanf("%s",FILE);

	fp1=fopen(FILE,"r");

    while(!feof(fp1)) 
    {
        ch=fgetc(fp1);
printf("\n\tbuffer=%s\n",buffer);
		if(ch=='"') 
		{
			if(litflag=0)
			litflag=1;
		}

        if(isalnum(ch) || litflag==1) 
        {
            buffer[k]=ch;
            buffer[k+1]='\0';
            k++;
            flag=1;
printf("\n\tbufferi=%s\n",buffer);

        }
        else 
        {
            if(flag==1) 
            {
                if(searchTerminal(KEYWORD,sizeof(KEYWORD)/10,buffer)==1) 
                {
                    ust[iust].num=iust+1;
                    strcpy(ust[iust].name,buffer);
                    strcpy(ust[iust].desc,"keyword");
                    iust++;
                }
                else 
                {
                    if(isdigit(buffer[0]) || buffer[0]=='"') 
                    {
                    	if(buffer[0]=='"') 
                    	{
                    		buffer[strlen(buffer)]='"';
                    		buffer[strlen(buffer)+1]='\0';
                    	}
                        lt[ilt].num=ilt+1;
                        strcpy(lt[ilt].name,buffer);
                        ilt++;
                        printf(">>%s",buffer);
                    }
                    else 
                    {
                    	if(searchTable(st,ist,buffer)==0)
                    	{
		                    st[ist].num=ist+1;
		                    strcpy(st[ist].name,buffer);
		                    ist++;
                    	}
                    }
                    ust[iust].num=iust+1;
                    strcpy(ust[iust].name,buffer);
                    strcpy(ust[iust].desc,"symbol/literal");
                    iust++;
                }
                flag=0;
            }

            k=0;
            buffer[k]=ch;
            buffer[k+1]='\0';

            if (ch==' ' || ch=='\n'){
                //do nothing
            }
            else if(searchTerminal(OPERATOR,sizeof(OPERATOR)/10,buffer)) {
                ust[iust].num=iust+1;
                strcpy(ust[iust].name,buffer);
                strcpy(ust[iust].desc,"operator");
                iust++;
            }
            k=0;
        }
    }

	fclose(fp1);

    printf("\n\tUST >>");
	for(i=0;i<iust;i++)
		printf("\n\t%d\t%s\t%s",ust[i].num,ust[i].name,ust[i].desc);
    printf("\n\tSymbol >>");
	for(i=0;i<ist;i++)
		printf("\n\t%d\t%s",st[i].num,st[i].name);
    printf("\n\tLiteral >>");
	for(i=0;i<ilt;i++)
		printf("\n\t%d\t%s",lt[i].num,lt[i].name);

	printf("\n");	
	return 0;
}
